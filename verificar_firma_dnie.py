import click
import subprocess
import hashlib
from cryptography import x509
from cryptography.hazmat.primitives import hashes, serialization # Importamos 'serialization'
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.exceptions import InvalidSignature # Para capturar el error espec√≠fico

@click.group()
def cli():
    """Herramienta para verificar firmas digitales con el DNIe."""
    pass

@cli.command()
@click.argument('documento', type=click.Path(exists=True))
@click.argument('firma', type=click.Path(exists=True))
@click.argument('certificado', type=click.Path(exists=True))
def verify(documento, firma, certificado):
    """Verifica la firma de un DOCUMENTO usando la FIRMA y el CERTIFICADO (DER)."""
    try:
        # --- Leer archivos ---
        with open(documento, 'rb') as f:
            data = f.read()
        with open(firma, 'rb') as f:
            signature = f.read()
        with open(certificado, 'rb') as f:
            cert_bytes = f.read()

        # --- Cargar certificado ---
        cert = x509.load_der_x509_certificate(cert_bytes)

        print("\n=== INFORMACI√ìN DEL CERTIFICADO ===")
        print(f"üìá Sujeto: {cert.subject}")
        print(f"üè¢ Emisor: {cert.issuer}")
        print(f"üìÖ V√°lido desde: {cert.not_valid_before_utc.strftime('%Y-%m-%d %H:%M:%S')} UTC")
        print(f"üìÖ V√°lido hasta: {cert.not_valid_after_utc.strftime('%Y-%m-%d %H:%M:%S')} UTC")

        # --- Calcular hash para mostrarlo ---
        hash_documento = hashlib.sha256(data).hexdigest()
        print(f"\nüîê Hash del documento (SHA-256): {hash_documento}")

        # --- Intentar verificaci√≥n con cryptography (M√âTODO SIMPLIFICADO Y ROBUSTO) ---
        print("\nüîç Intentando verificaci√≥n con librer√≠a 'cryptography'...")
        try:
            public_key = cert.public_key()
            # Dejamos que la librer√≠a haga el hash internamente. Es m√°s fiable.
            public_key.verify(
                signature,
                data,  # Pasamos los datos originales, no el hash
                padding.PKCS1v15(),
                hashes.SHA256() # Indicamos el algoritmo de hash que debe usar
            )
            print("\n‚úÖ‚úÖ‚úÖ VERIFICACI√ìN EXITOSA ‚úÖ‚úÖ‚úÖ")
            return
        except InvalidSignature:
            print("‚ö†Ô∏è  Verificaci√≥n con 'cryptography' fall√≥. La firma no es v√°lida.")
        except Exception as e:
            print(f"‚ö†Ô∏è  Ocurri√≥ un error inesperado con 'cryptography': {e}")

    except Exception as e:
        print(f"\n‚ùå‚ùå‚ùå ERROR GENERAL ‚ùå‚ùå‚ùå")
        print(f"No se pudo completar la verificaci√≥n: {e}")

if __name__ == '__main__':
    cli()

